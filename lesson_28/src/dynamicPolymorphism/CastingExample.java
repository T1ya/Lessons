package dynamicPolymorphism;

/*
Casting в Java.
Объекты могу принадлежать к классу Х, но при этом могут быть приведены к другому типу,
ТОЛЬКО если между классами есть связь наследования

casting бывает двух видов:
- восходящее преобразование (upcasting) это преобразование объекта дочернего к объекту родительского класса
- нисходящее преобразование (downcasting) это преобразование объекта родительского класса в тип дочернего класса
*/

public class CastingExample {
    public static void main(String[] args) {
        //восходящее преобразование происходит автоматически.
        Animal cat = new Cat();  // Cat автоматически преобразуется к типу Animal

        /*
        ВАЖНО!

        Тип ссылочной переменной определяет две вещи:
        1) ссылки на объекты каких типов могут храниться в этой переменной
        2) список методов, которые можно вызвать, обращаясь к этой переменной

         */

        cat.voice(); // доступны только методы класса Animal, но реализация пойдёт от класса Cat )
        // animal.purr(); этот метод реализован в классе Cat, а в Animal его нету. Так что будет ошибка!

        //зачем? Гибкость!
        //например, мы можем собрать объекты в один массив!
        // массивы строго типизированы, и объекты разных типов запихнуть в один массив не получится
        // А используя нисходящее преобразование, мы можем отправить в массив объекты как бы одного типа, но с разной реализацией базовых методов!
        Animal dog = new Dog();
        Animal hamster = new Hamster();

        Animal [] animals = {cat, dog, hamster};
        for (Animal a: animals) {
            a.voice();
        }

    }

}
